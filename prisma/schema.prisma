// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  pin           String?   // Hashed PIN for authentication
  avatar        String?   // Avatar file path or identifier
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  categories   Category[]
  transactions Transaction[]
  budgets      Budget[]
  savingsGoals SavingsGoal[]
}

model Category {
  id        String   @id @default(cuid())
  name      String
  icon      String?
  color     String?
  type      String   // "INCOME" | "EXPENSE"
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgetItems  BudgetItem[]

  // Indexes for performance
  @@index([userId])
  @@index([type])
  @@unique([userId, name]) // Prevent duplicate category names per user
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        String   // "INCOME" | "EXPENSE"
  description String
  date        DateTime
  categoryId    String
  userId        String
  savingsGoalId String?
  receiptUrl    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  savingsGoal SavingsGoal? @relation(fields: [savingsGoalId], references: [id], onDelete: SetNull)

  // Indexes for performance optimization
  @@index([userId, date]) // Primary query pattern: user's transactions by date
  @@index([categoryId])   // Filter by category
  @@index([type])         // Filter by income/expense
  @@index([userId, type]) // Combined user + type queries
}

model Budget {
  id          String   @id @default(cuid())
  name        String   // e.g., "January 2024 Budget", "Monthly Budget"
  period      String   // "MONTHLY" | "WEEKLY" | "YEARLY"
  startDate   DateTime
  endDate     DateTime
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  budgetItems BudgetItem[]

  // Indexes for performance
  @@index([userId])
  @@index([userId, period])
  @@index([userId, isActive])
}

model BudgetItem {
  id         String   @id @default(cuid())
  budgetId   String
  categoryId String
  amount     Float
  type       String   // "INCOME" | "EXPENSE"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  budget   Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([budgetId])
  @@index([budgetId, type])
  @@unique([budgetId, categoryId]) // One budget item per category per budget
}

model SavingsGoal {
  id           String   @id @default(cuid())
  userId       String
  title        String   // e.g., "New Laptop", "Vacation Fund"
  description  String?  // Optional details
  targetAmount Float    // Goal amount to reach
  deadline     DateTime? // Optional target date
  status       String   @default("ACTIVE") // ACTIVE | ACHIEVED | DISCARDED
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  // Indexes for performance
  @@index([userId])
  @@index([userId, status])
}
